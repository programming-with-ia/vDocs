import {
  removeDefinedInSections,
  removeEslintDisableComments,
  removeFirstLine,
  removeJSDocComments,
  transformImports,
  replaceRelativePaths,
} from "./data-transform";
import {
  autoGeneratedNotice,
  generatedDir,
  hooksDocsDir,
  typedocDir,
  typedocTypesDir,
} from "./consts";
import path from "path";
import fs from "fs-extra";
import { camelToKebabCase, getLine, readFile, withCache } from "./utils";
import { siteconfig } from "../../docs/.vitepress/siteconfig";

function getTypedocTypesFiles() {
  console.log("getTypedocTypesFiles");
  return fs
    .readdirSync(typedocTypesDir)
    .filter((fPath) => fs.statSync(path.join(typedocTypesDir, fPath)).isFile());
}

const getTypedocTypesFilesCached = withCache(getTypedocTypesFiles);

export function generateDocFiles(filePath: string, hookName: string) {
  const slug = camelToKebabCase(hookName);
  const [hookDoc] = [
    fs.readFileSync(
      path.join(typedocDir, "functions", `${hookName}.${hookName}.md`),
      "utf-8"
    ),
  ]
    .map(removeFirstLine)
    .map(removeDefinedInSections)
    .map((data) => replaceRelativePaths(data, slug));

  // const typeAliases: Array<string> = getTypeAliasesData(hook)
  //   .map(removeFirstLine)
  //   .map(removeDefinedInSections)
  //   .map(replaceRelativePaths);

  const typeAliases = getTypedocTypesFilesCached()
    .filter((fileName) => fileName.startsWith(hookName))
    .map((fileName) =>
      fs.readFileSync(path.join(typedocTypesDir, fileName), "utf-8")
    )
    .map(removeFirstLine)
    .map(removeDefinedInSections)
    .map((data) => replaceRelativePaths(data, slug));

  // const [demo] = getDemoData(hook)
  //   .map(removeJSDocComments)
  //   .map(removeEslintDisableComments)
  //   .map(transformImports);

  const [demo] = [readFile(path.join("demos", hookName + ".tsx"))]
    .map(removeJSDocComments)
    .map(removeEslintDisableComments)
    .map(transformImports);

  // const [code] = getCodeData(hook)
  //   .map(removeJSDocComments)
  //   .map(removeEslintDisableComments)
  //   .map(transformImports)
  //   .map((data) => data.trim());

  const [code] = [readFile(filePath)]
    .map(removeJSDocComments)
    .map(removeEslintDisableComments)
    .map(transformImports)
    .map((data) => data.trim());

  const hookHighlightIndexes = demo
    .split("\n")
    .map((line, index) => {
      if (line.startsWith("import")) return null;
      if (!line.includes(hookName)) return null;
      return index + 1;
    })
    .filter(Boolean);

  const desc = getLine(hookDoc, 4) || "";
  // Template
  const data = `---
${autoGeneratedNotice}

title: ${hookName}
titleTemplate: :title - vHooks | ${siteconfig.name}
description: ${hookName} - ${desc}
editLink: false
slug: ${slug}
path: /hooks/${slug}
head:
  - - meta
    - name: keywords
      content: ${[
        hookName,
        "vHooks",
        "vDocs",
        "react",
        "hooks",
        "react hooks",
        "custom hooks",
        "custom",
      ].join(",")}
---

# ${hookName}

${desc}

## Usage

\`\`\`tsx showLineNumbers {${hookHighlightIndexes.join(",")}}
${demo.trim()}
\`\`\`

## API

${hookDoc}

${
  typeAliases.length > 0
    ? "### Type aliases\n\n" + typeAliases.join("\n") + "\n"
    : ""
}

## Hook

\`\`\`ts showLineNumbers
${code}
\`\`\`
`;

  // Write the file

  const file = path.resolve(path.join(hooksDocsDir, slug + ".md"));
  fs.writeFileSync(file, data, "utf-8");

  return { slug, desc, hookName };
}
